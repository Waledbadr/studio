rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    function isOwner(userId) { return isSignedIn() && userId == request.auth.uid; }
    function isAdminUser(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role == 'Admin';
    }

    // Feedback documents
    match /feedback/{feedbackId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Allow all signed-in users to read feedback (adjust if needed)
      allow read: if isSignedIn();
      allow update, delete: if isAdmin();

      // Developer updates (subcollection)
      match /updates/{updateId} {
        function parentOwner() {
          return get(/databases/$(database)/documents/feedback/$(feedbackId)).data.userId;
        }
        allow read: if isAdmin() || isOwner(parentOwner());
        allow create, update, delete: if isAdmin();
      }
    }

    // Notifications
    match /notifications/{notificationId} {
      // Allow creating notifications for self, or targeting Admin users
      allow create: if isAdmin() || (isSignedIn() && (request.resource.data.userId == request.auth.uid || isAdminUser(request.resource.data.userId)));
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow update: if isAdmin() || isOwner(resource.data.userId);
      allow delete: if isAdmin();
    }

    // Users collection: basic access model
    match /users/{uid} {
      allow read: if isSignedIn();
      // A user can create/update their own profile; Admins can manage all
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
      allow delete: if isAdmin();
    }

    // FCM tokens: users can create their own token docs
    match /fcmTokens/{tokenId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow update: if isAdmin() || (isSignedIn() && request.resource.data.userId == request.auth.uid);
      allow delete: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
    }

    // Unique email mapping used by admin user management
    match /unique_users_emails/{emailKey} {
      allow read, write: if isAdmin();
    }

    // Default: no broad allow; define explicit rules per collection as needed.
  }
}
